import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Jeremiah Hennessy
 * 
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int index = getChildElement(channel, "title");
        
        String title = "Empty Title";
        if(channel.child(index).numberOfChildren() > 0) {
            title = channel.child(index).child(0).label();
        }
        
        index = getChildElement(channel, "description");
        
        String description = "No Description";
        if(channel.child(index).numberOfChildren() > 0) {
            description = channel.child(index).child(0).label();
        }
        
        index = getChildElement(channel, "link");
        
        String channelLink = "";
        if(channel.child(index).numberOfChildren() > 0) {
           channelLink = channel.child(index).child(0).label();
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("\t<h1> <a href=\"" + channelLink + "\">" + title + "</a>" + "</h1>");
        out.println("\t<p>" + description + "</p>");
        out.println("\t<table border ='1px solid black'>");
        out.println("\t\t<tr>");
        out.println("\t\t\t<th>Date</th>");
        out.println("\t\t\t<th>Source</th>");
        out.println("\t\t\t<th>News</th>");
        out.println("\t\t</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("\t</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //loop will stop iteration once an index is found
        int firstChildIndex = -1;
        int index = 0;
        while(index < xml.numberOfChildren()) {
            if(xml.child(index).label().equals(tag)) {
                firstChildIndex = index;
                index = xml.numberOfChildren();
            }
            index++;
        }
        return firstChildIndex;     
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String pubDate = "No date available";
        int index = getChildElement(item, "pubDate");
        if(index > -1) {
               pubDate = item.child(index).child(0).label();
        }

        //if no title is present the loop attempts to find description
        String title = "No title available";
        index = getChildElement(item, "title");
        if(index > -1 && item.child(index).numberOfChildren() > 0) {
            title = item.child(index).child(0).label();
        }else {
            index = getChildElement(item, "description");
            if(index > -1 && item.child(index).numberOfChildren() > 0) {
                title = item.child(index).child(0).label();
            }
        }
        
        String source = "No source available";
        String srcLnk = "";
        index = getChildElement(item, "source");
        if(index > -1 && item.child(index).numberOfChildren() > 0) {
            source = item.child(index).child(0).label();
            srcLnk = item.child(index).attributeValue("url");
        }

        //prints out values with variations for a source link and a title link
        index = getChildElement(item, "link");
        if(index > -1) {
               String link = item.child(index).child(0).label();
               //srcLnk.length() will be greater than 0 only when a source was available
               if(srcLnk.length() > 0) {
                   out.println("<tr>");
                   out.println("\t<td>" + pubDate + "</td>");
                   out.println("\t<td> <a href=\"" + srcLnk + "\">" + source + "</a>" + "</td>");
                   out.println("\t<td> <a href=\"" + link + "\">" + title + "</a>" + "</td>");
                   out.println("</tr>");
               }else {
                   out.println("<tr>");
                   out.println("\t<td>" + pubDate + "</td>");
                   out.println("\t<td>" + source + "</td>");
                   out.println("\t<td> <a href=\"" + link + "\">" + title + "</a>" + "</td>");
                   out.println("</tr>");
               }
        }else {
            if(srcLnk.length() > 0) {
                out.println("<tr>");
                out.println("\t<td>" + pubDate + "</td>");
                out.println("\t<td> <a href=\"" + srcLnk + "\">" + source + "</a>" + "</td>");
                out.println("\t<td>" + title + "</td>");
                out.println("</tr>");
            }else {
                out.println("<tr>");
                out.println("\t<td>" + pubDate + "</td>");
                out.println("\t<td>" + source + "</td>");
                out.println("\t<td>" + title + "</td>");
                out.println("</tr>");
            }
        }
    }
    
    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * 
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
    */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree rss = new XMLTree1(url);
        
        //creates HTML file for rss 2.0
        if(rss.label().equals("rss") && rss.hasAttribute("version") && rss.attributeValue("version").equals("2.0")) {
            SimpleWriter htmlFile = new SimpleWriter1L(file);
            XMLTree channel = rss.child(0);
            outputHeader(channel, htmlFile);
            int childSpot = 0;
            while(childSpot < channel.numberOfChildren()) { 
                if(channel.child(childSpot).label().equals("item")) {
                    XMLTree item = channel.child(childSpot);
                    processItem(item, htmlFile);
                }
                childSpot++;
            }
            outputFooter(htmlFile);
            htmlFile.close();
        }else {
            out.println("Not rss 2.0");
        }
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        
        out.println("Enter an XML document of: ");
        String mainUrl = in.nextLine();
        XMLTree feeds = new XMLTree1(mainUrl); 
        
        out.println("Enter a file name: ");
        String fileName = in.nextLine();
        SimpleWriter mainFile = new SimpleWriter1L(fileName + ".html");
        
        String feedsTitle = "No title for the feeds";
        
        if(feeds.hasAttribute("title")) {
            feedsTitle = feeds.attributeValue("title");
        }
        
        //format HTML file
        mainFile.println("<html>");
        mainFile.println("<head>");
        mainFile.println("<title>" + feedsTitle + "</title>");
        mainFile.println("<h1>" + feedsTitle + "</h1>");
        mainFile.println("</head>");
        mainFile.println("<body>");
        mainFile.println("<ul>");
        
        //create links to each rss HTML page
        int childSpot = 0;
        while(childSpot < feeds.numberOfChildren()) {
            String url = "";
            String name = "";
            String file = "";
            
            if(feeds.child(childSpot).hasAttribute("url")) {
                url = feeds.child(childSpot).attributeValue("url");
            }
            
            if(feeds.child(childSpot).hasAttribute("name")) {
                name = feeds.child(childSpot).attributeValue("name");
            }
            
            if(feeds.child(childSpot).hasAttribute("file")) {
                file = feeds.child(childSpot).attributeValue("file");
            }
            
            //creates the file for each individual rss feed
            processFeed(url, file, out);
            
            //link to the HTML pages
            mainFile.println("<li> <a href=\"" + file + "\">" + name + "</a>" + "</li>");
            childSpot++;
        }
        
        mainFile.println("</ul>");
        mainFile.println("</body>");
        mainFile.print("</html>");
        
        out.println("success");
        mainFile.close();
        
        in.close();
        out.close();
    }

}
